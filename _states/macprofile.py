# adapted from https://github.com/mosen/salt-osx/ by lkubb

# The MIT License (MIT)

# Copyright (c) 2014 mosen

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# -*- coding: utf-8 -*-
"""
create and install configuration profiles.

 .. code-block:: yaml

    example_state_profile:
      profile.installed:
        - name: example name
        - description: 'Example Description'
        - displayname: 'Managing a Preference'
        - organization: MegaCorp
        - removaldisallowed: True
        - scope: System
        - content:
            - PayloadType: com.apple.ManagedClient.preferences
              PayloadContent:
                com.megacorp.preference: <- preference domain
                  Forced:
                    - mcx_preference_settings:
                        ExamplePreferenceKey: True
                ...

"""


import logging

import salt.exceptions
import salt.utils
import salt.utils.platform

log = logging.getLogger(__name__)

__virtualname__ = "macprofile"


def __virtual__():
    if salt.utils.platform.is_darwin():
        return __virtualname__

    return (False, "state.macprofile only available on macOS.")


def installed(name, force=None, ptype=None, validate=True, **kwargs):
    """
    Create and install the specified configuration profile, using the supplied payload content.
    This state module is not intended to be used at the command line.

    name:
        The name of the resource is the payload identifier, which is used to determine whether the payload is
        installed.

    force:
        True or False, will overwrite existing profile with the same name.

    ptype
        If the payload contents all have the same PayloadType (configuration target, eg 'com.apple.Finder'), specify
        it here to skip having to add it to each payload

    validate:
        bool. Since MacOS Big Sur, silent installation of profiles is impossible without MDM.
        Validate the interactive installation of the profile â€“ requires waiting for the user to confirm.

    Keyword Arguments:

        description:
            Description shown below profile name in profile preferences.

        displayname:
            The main title shown that identifies the profile.

        organization:
            The organization responsible for creating the profile.

        removaldisallowed:
            Whether or not to disallow removal of this profile.

        content:
            The payload data contained within this profile. Should be generated by another formula.
    """
    ret = {"name": name, "result": True, "changes": {}, "comment": ""}

    exists = __salt__["macprofile.exists"](name)

    content = __salt__["macprofile.generate"](name, None, ptype, **kwargs)

    valid = __salt__["macprofile.validate"](name, content)

    if exists and valid["installed"]:
        ret["comment"] = 'Profile identifier "{}", already installed.'.format(name)
        return ret

    mcpath = __salt__["temp.file"](".mobileconfig", "salt")
    f = open(mcpath, "wb")
    f.write(content)
    f.close()

    log.debug("Wrote .mobileconfig in secure temporary location: {}".format(mcpath))

    if __opts__["test"]:
        ret["result"] = None
        ret[
            "comment"
        ] = "New profile would have been generated, property list follows: {0}".format(
            content
        )
        ret["changes"] = {name: "need to make profile"}
        return ret

    if validate:
        try:
            ret["result"] = __salt__["macprofile.install"](mcpath, name, content)
        except salt.exceptions.CommandExecutionError as e:
            ret["result"] = False
            ret["comment"] = str(e)
    else:
        ret["result"] = __salt__["macprofile.install"](mcpath)

    if ret["result"]:
        ret["comment"] = 'Profile "{0}", installed successfully.'.format(name)
        ret["changes"].update(
            {
                name: {
                    "Old Profile": valid["old_payload"],
                    "New Profile": valid["new_payload"],
                }
            }
        )

    return ret


def absent(name):
    """
    Remove the configuration profile with the specified identifier.
    """
    ret = {"name": name, "result": True, "changes": {}, "comment": ""}

    exists = __salt__["macprofile.exists"](name)

    if not exists:
        ret["comment"] = "Profile is already absent"
        return ret

    if __opts__["test"]:
        ret["result"] = None
        ret["comment"] = "Profile with identifier: {0} would have been removed.".format(
            name
        )
        return ret

    success = __salt__["macprofile.remove"](name)

    if success:
        ret["comment"] = "Profile with identifier: {0} successfully removed".format(
            name
        )
        ret["changes"].update({name: {"old": "Installed", "new": "Removed"}})
    else:
        ret["result"] = False
        ret["comment"] = "Failed to remove profile with identifier: {0}".format(name)

    return ret
